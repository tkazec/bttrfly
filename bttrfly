#!/usr/bin/env node

var bttrfly = require("./index");
var program = require("commander");
var ProgressBar = require("progress");

program
	.version(require("./package.json").version)
	.option("-u, --user <txt>", "Google Voice email address.")
	.option("-p, --pass <txt>", "Google Voice password.")
	.option("-t, --tokens <obj>", "JSON object of Google Voice auth tokens.")
	.option("-c, --contacts <arr>", "JSON array of objects of contacts to text.")
	.option("-m, --message <str>", "JSON string message to text.")
	.option("-d, --dry", "Log texts instead of sending them.")
	.on("--help", function () {
		console.log("    Pipe JSON to populate any of the properties. Options take precedence.");
		console.log();
		console.log("  Properties:");
		console.log();
		console.log("    user: Email address you log in to Google Voice with.");
		console.log("    pass: Password you log in to Google Voice with.");
		console.log("          If 2-step verification is on, use an application-specific password.");
		console.log("    tokens: Optional Google Voice auth tokens. Logged after texts are sent.");
		console.log("    contacts: List of contacts. Meaningful keys: phone, skip.");
		console.log("    message: Text to send. #{keys} are replaced with data from contacts.");
		console.log();
		console.log("  Examples:");
		console.log();
		console.log("    $ bttrfly -u foo@bar.com -p foobar -c '[...]' -m '\"Hello world!\"'");
		console.log("    $ cat contacts.json | bttrfly -p foobar -m '\"Hey #{fname}! Sup?\"'");
		console.log();
		console.log("  API: require(\"bttrfly\")(options, onsend(error, contact), ondone(tokens));");
		console.log();
		console.log("  Warning: Use at your own risk. ;)");
		console.log();
	})
	.parse(process.argv);

var run = function (options) {
	options = {
		user: program.user || options.user,
		pass: program.pass || options.pass,
		tokens: program.tokens ? JSON.parse(program.tokens) : options.tokens,
		contacts: program.contacts ? JSON.parse(program.contacts) : options.contacts,
		message: program.message ? JSON.parse(program.message) : options.message,
		dry: program.dry
	};
	
	if (!options.user || !options.pass || !options.tokens || !options.contacts || !options.message) {
		return program.help();
	}
	
	if (!options.dry) {
		var bar = new ProgressBar("Texting :current of :total.\t[:bar]\t:percent :etas", {
			total: options.contacts.length,
			width: 40,
			incomplete: " ",
			clear: true
		});
	}
	
	var queue = "";
	
	bttrfly(options, function (err, contact) {
		if (err) {
			queue += (!options.dry ? "Error texting " : "Would text ") + contact.phone + ": " + err + "\n";
		}
		
		if (!options.dry) {
			bar.tick();
		}
	}, function (tokens) {
		if (!options.dry) {
			console.log(queue + "Texts sent!");
			console.log("Tokens used: " + JSON.stringify(tokens));
		} else {
			console.log(queue + "Texts simulated!");
		}
	});
};

if (process.stdin.isTTY) {
	run({});
} else {
	var options = "";
	
	process.stdin.on("readable", function () {
		options += this.read() || "";
	}).on("end", function () {
		run(JSON.parse(options || "{}"));
	});
}